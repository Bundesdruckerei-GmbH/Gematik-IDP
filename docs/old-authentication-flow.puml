@startuml ogr

participant OGR_APP order 0
participant Browser order 1
participant UserAccount order 2
participant Authenticator order 3
participant Gematik_IDP order 4

autonumber

OGR_APP -> Browser: Initiate login via <keycloak-url>/.../openid-connect/auth?<font color=purple><b>redirect_uri</font>=...
Browser -> Browser: User select "Login with HBA"
Browser -> UserAccount: GET <keycloak-url>/broker/<idp-id>/login
UserAccount -> Gematik_IDP: GET <idp_url>/.well-known/openid-configuration
Gematik_IDP -> UserAccount: 200 discovery document as JWS
UserAccount -> UserAccount: Verify discovery document and extract\n\
<font color=blue><b>authorization_url</font>, <font color=green><b>token_url</font> and certificate urls
UserAccount -> Browser: Redirect 303 <keycloak-url>/broker/<idp-id>/endpoint/startAuth
Browser -> UserAccount: GET <keycloak-url>.../broker/<idp-id>/endpoint/startAuth
UserAccount -> UserAccount: Generate <font color=brown><b>code_verifier</font> and store it in the users authentication session.

group Fetch HBA data (scope=<b>Person_ID</b>) from Authenticator:
UserAccount -> Browser: Redirect 302 authenticator://?challenge_path=<font color=blue><b>authorization_url</font>\n\
?redirect_url=<keycloak-url>/.../<idp-id>/endpoint/result\n\
&code_challenge=<font color=brown><b>code_verifier</font>&scope=openid Person_ID
Browser -> Authenticator: Opens authenticator://?challenge_path=<font color=blue><b>authorization_url</font>\n\
?redirect_url=<keycloak-url>/.../<idp-id>/endpoint/result\n\
&code_challenge=<font color=brown><b>code_verifier</font>&scope=openid Person_ID
Authenticator <-> Gematik_IDP: doing internal stuff
Authenticator -> UserAccount: POST redirect_url=<keycloak-url>/.../<idp-id>/endpoint/result\n\
?code=...&ssotoken=...&state
UserAccount -> Authenticator: Redirect 302 <keycloak-url>/.../<idp-id>/endpoint/result\n\
?code=...&ssotoken=...&state
note left
We respond with 302, because we need the browser cookies
for the stored user authentication session.
Authenticator opens 302 in the browser.
end note
Authenticator -> Browser: Redirect 302 <keycloak-url>/.../<idp-id>/endpoint/result\n\
?code=...&ssotoken=...&state
Browser -> UserAccount: GET <keycloak-url>/.../<idp-id>/endpoint/result\n\
?code=...&ssotoken=...&state
note right
Here we have the authentication session to retrieve
the previously created <font color=brown><b>code_verifier</font>
end note
UserAccount -> Gematik_IDP: GET uri_puk_idp_enc
Gematik_IDP -> UserAccount: return certificate
UserAccount -> UserAccount: Generate <font color=darkorange><b>key_verifier</font> with <font color=brown><b>code_verifier</font>\n\
and certificate
UserAccount -> Gematik_IDP: POST <font color=green><b>token_url</font>?client_id=...&code=...\n\
&key_verifier=<font color=darkorange><b>key_verifier</font>\n\
&redirect_url=<keycloak-url>/.../<idp-id>/endpoint/result
Gematik_IDP -> UserAccount: encrypted token containing access_token and id_token
UserAccount -> UserAccount: decrypt id_token, verify with JWKS and store it
end

group Fetch SMCB data (scope=<b>Institutions_ID</b>) from Authenticator:
UserAccount -> Browser: Redirect 302 authenticator://?challenge_path=<font color=blue><b>authorization_url</font>\n\
?redirect_url=<keycloak-url>/.../<idp-id>/endpoint/result\n\
&code_challenge=<font color=brown><b>code_verifier</font>&scope=openid <b>Institutions_ID</b>
note over Browser, Gematik_IDP: same as above
end

UserAccount -> UserAccount: Update user with HBA/SMCB data based on IDP mapper
UserAccount -> Browser: Redirect 302 <font color=purple><b>redirect_uri</font>
Browser -> OGR_APP: 302 <font color=purple><b>redirect_uri</font>

@enduml
